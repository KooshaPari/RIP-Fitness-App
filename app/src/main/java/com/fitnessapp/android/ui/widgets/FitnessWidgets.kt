package com.fitnessapp.android.ui.widgets

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp

/**
 * Home screen widgets for quick fitness tracking access
 * 
 * Provides glanceable information and quick actions without opening the full app
 * Supports multiple widget sizes and configurations
 * 
 * Widget types:
 * - Daily summary widget (calories, steps, workouts)
 * - Quick log widget (food, water, workout)
 * - Progress widget (weekly goals, streaks)
 * - Health metrics widget (heart rate, sleep, activity)
 */

/**
 * Small widget showing daily summary
 */
@Composable
fun DailySummaryWidget(
    calories: Int,
    calorieGoal: Int,
    steps: Int,
    stepGoal: Int,
    workouts: Int,
    modifier: Modifier = Modifier
) {
    Card(\n        modifier = modifier,\n        shape = RoundedCornerShape(16.dp)\n    ) {\n        Column(\n            modifier = Modifier.padding(16.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            Text(\n                text = \"Today's Progress\",\n                style = MaterialTheme.typography.titleSmall,\n                fontWeight = FontWeight.SemiBold\n            )\n            \n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween\n            ) {\n                WidgetMetric(\n                    icon = Icons.Default.LocalFireDepartment,\n                    value = calories.toString(),\n                    goal = calorieGoal.toString(),\n                    label = \"kcal\"\n                )\n                WidgetMetric(\n                    icon = Icons.Default.DirectionsWalk,\n                    value = steps.toString(),\n                    goal = stepGoal.toString(),\n                    label = \"steps\"\n                )\n                WidgetMetric(\n                    icon = Icons.Default.FitnessCenter,\n                    value = workouts.toString(),\n                    goal = \"1\",\n                    label = \"workouts\"\n                )\n            }\n        }\n    }\n}\n\n/**\n * Medium widget with quick action buttons\n */\n@Composable\nfun QuickLogWidget(\n    onLogFood: () -> Unit,\n    onLogWater: () -> Unit,\n    onStartWorkout: () -> Unit,\n    modifier: Modifier = Modifier\n) {\n    Card(\n        modifier = modifier,\n        shape = RoundedCornerShape(16.dp)\n    ) {\n        Column(\n            modifier = Modifier.padding(16.dp)\n        ) {\n            Text(\n                text = \"Quick Log\",\n                style = MaterialTheme.typography.titleSmall,\n                fontWeight = FontWeight.SemiBold\n            )\n            \n            Spacer(modifier = Modifier.height(12.dp))\n            \n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.spacedBy(8.dp)\n            ) {\n                QuickActionButton(\n                    icon = Icons.Default.Restaurant,\n                    label = \"Log Food\",\n                    onClick = onLogFood,\n                    modifier = Modifier.weight(1f)\n                )\n                QuickActionButton(\n                    icon = Icons.Default.WaterDrop,\n                    label = \"Add Water\",\n                    onClick = onLogWater,\n                    modifier = Modifier.weight(1f)\n                )\n                QuickActionButton(\n                    icon = Icons.Default.PlayArrow,\n                    label = \"Workout\",\n                    onClick = onStartWorkout,\n                    modifier = Modifier.weight(1f)\n                )\n            }\n        }\n    }\n}\n\n/**\n * Large widget showing weekly progress and goals\n */\n@Composable\nfun WeeklyProgressWidget(\n    weeklyGoals: Map<String, Pair<Int, Int>>, // goal type to (current, target)\n    currentStreak: Int,\n    modifier: Modifier = Modifier\n) {\n    Card(\n        modifier = modifier,\n        shape = RoundedCornerShape(16.dp)\n    ) {\n        Column(\n            modifier = Modifier.padding(16.dp)\n        ) {\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween,\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\n                    text = \"This Week\",\n                    style = MaterialTheme.typography.titleMedium,\n                    fontWeight = FontWeight.SemiBold\n                )\n                Row(\n                    verticalAlignment = Alignment.CenterVertically\n                ) {\n                    Icon(\n                        imageVector = Icons.Default.LocalFireDepartment,\n                        contentDescription = \"Streak\",\n                        tint = MaterialTheme.colorScheme.primary,\n                        modifier = Modifier.size(16.dp)\n                    )\n                    Spacer(modifier = Modifier.width(4.dp))\n                    Text(\n                        text = \"$currentStreak days\",\n                        style = MaterialTheme.typography.bodySmall,\n                        color = MaterialTheme.colorScheme.primary\n                    )\n                }\n            }\n            \n            Spacer(modifier = Modifier.height(16.dp))\n            \n            weeklyGoals.forEach { (goalType, currentToTarget) ->\n                val (current, target) = currentToTarget\n                val progress = if (target > 0) current.toFloat() / target.toFloat() else 0f\n                \n                Column {\n                    Row(\n                        modifier = Modifier.fillMaxWidth(),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        Text(\n                            text = goalType,\n                            style = MaterialTheme.typography.bodyMedium\n                        )\n                        Text(\n                            text = \"$current / $target\",\n                            style = MaterialTheme.typography.bodyMedium,\n                            fontWeight = FontWeight.Medium\n                        )\n                    }\n                    Spacer(modifier = Modifier.height(4.dp))\n                    LinearProgressIndicator(\n                        progress = progress.coerceIn(0f, 1f),\n                        modifier = Modifier.fillMaxWidth()\n                    )\n                    if (goalType != weeklyGoals.keys.last()) {\n                        Spacer(modifier = Modifier.height(12.dp))\n                    }\n                }\n            }\n        }\n    }\n}\n\n/**\n * Health metrics widget showing key health data\n */\n@Composable\nfun HealthMetricsWidget(\n    heartRate: Int?,\n    steps: Int,\n    sleepHours: Double?,\n    modifier: Modifier = Modifier\n) {\n    Card(\n        modifier = modifier,\n        shape = RoundedCornerShape(16.dp)\n    ) {\n        Column(\n            modifier = Modifier.padding(16.dp)\n        ) {\n            Text(\n                text = \"Health Metrics\",\n                style = MaterialTheme.typography.titleSmall,\n                fontWeight = FontWeight.SemiBold\n            )\n            \n            Spacer(modifier = Modifier.height(12.dp))\n            \n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween\n            ) {\n                WidgetHealthMetric(\n                    icon = Icons.Default.Favorite,\n                    value = heartRate?.toString() ?: \"--\",\n                    unit = \"bpm\",\n                    color = MaterialTheme.colorScheme.error\n                )\n                WidgetHealthMetric(\n                    icon = Icons.Default.DirectionsWalk,\n                    value = steps.toString(),\n                    unit = \"steps\",\n                    color = MaterialTheme.colorScheme.primary\n                )\n                WidgetHealthMetric(\n                    icon = Icons.Default.Bedtime,\n                    value = sleepHours?.let { \"${it}h\" } ?: \"--\",\n                    unit = \"sleep\",\n                    color = MaterialTheme.colorScheme.tertiary\n                )\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun WidgetMetric(\n    icon: ImageVector,\n    value: String,\n    goal: String,\n    label: String,\n    modifier: Modifier = Modifier\n) {\n    Column(\n        modifier = modifier,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(\n            imageVector = icon,\n            contentDescription = label,\n            tint = MaterialTheme.colorScheme.primary,\n            modifier = Modifier.size(16.dp)\n        )\n        Spacer(modifier = Modifier.height(4.dp))\n        Text(\n            text = value,\n            style = MaterialTheme.typography.labelLarge,\n            fontWeight = FontWeight.Bold\n        )\n        Text(\n            text = \"/ $goal\",\n            style = MaterialTheme.typography.labelSmall,\n            color = MaterialTheme.colorScheme.onSurfaceVariant\n        )\n        Text(\n            text = label,\n            style = MaterialTheme.typography.labelSmall,\n            color = MaterialTheme.colorScheme.onSurfaceVariant\n        )\n    }\n}\n\n@Composable\nprivate fun QuickActionButton(\n    icon: ImageVector,\n    label: String,\n    onClick: () -> Unit,\n    modifier: Modifier = Modifier\n) {\n    Column(\n        modifier = modifier,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        FilledTonalIconButton(\n            onClick = onClick\n        ) {\n            Icon(\n                imageVector = icon,\n                contentDescription = label\n            )\n        }\n        Spacer(modifier = Modifier.height(4.dp))\n        Text(\n            text = label,\n            style = MaterialTheme.typography.labelSmall,\n            color = MaterialTheme.colorScheme.onSurfaceVariant\n        )\n    }\n}\n\n@Composable\nprivate fun WidgetHealthMetric(\n    icon: ImageVector,\n    value: String,\n    unit: String,\n    color: androidx.compose.ui.graphics.Color,\n    modifier: Modifier = Modifier\n) {\n    Column(\n        modifier = modifier,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(\n            imageVector = icon,\n            contentDescription = unit,\n            tint = color,\n            modifier = Modifier.size(20.dp)\n        )\n        Spacer(modifier = Modifier.height(4.dp))\n        Text(\n            text = value,\n            style = MaterialTheme.typography.labelMedium,\n            fontWeight = FontWeight.Bold,\n            color = color\n        )\n        Text(\n            text = unit,\n            style = MaterialTheme.typography.labelSmall,\n            color = MaterialTheme.colorScheme.onSurfaceVariant\n        )\n    }\n}"