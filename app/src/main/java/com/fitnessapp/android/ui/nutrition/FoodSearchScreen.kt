package com.fitnessapp.android.ui.nutrition

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp

/**
 * Food search screen for finding and adding foods to nutrition log
 * 
 * Features:
 * - Real-time search through food database
 * - Filter by categories (foods, recipes, brands)
 * - Nutrition information preview
 * - Recent searches and favorites
 * - Integration with barcode scanner
 * 
 * Provides comprehensive food discovery and selection capabilities
 */

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FoodSearchScreen(
    onBackClick: () -> Unit,
    onFoodSelected: (String) -> Unit,
    modifier: Modifier = Modifier
) {
    var searchQuery by remember { mutableStateOf(\"\") }\n    var selectedFilter by remember { mutableStateOf(\"All\") }\n    val filters = listOf(\"All\", \"Foods\", \"Recipes\", \"Brands\")\n    \n    // Mock search results\n    val searchResults = remember(searchQuery) {\n        if (searchQuery.isBlank()) {\n            emptyList()\n        } else {\n            listOf(\n                FoodItem(\"Chicken Breast\", \"165 kcal per 100g\", \"Protein: 25g, Carbs: 0g, Fat: 4g\"),\n                FoodItem(\"Brown Rice\", \"123 kcal per 100g\", \"Protein: 3g, Carbs: 25g, Fat: 1g\"),\n                FoodItem(\"Broccoli\", \"34 kcal per 100g\", \"Protein: 3g, Carbs: 7g, Fat: 0g\"),\n                FoodItem(\"Salmon Fillet\", \"208 kcal per 100g\", \"Protein: 22g, Carbs: 0g, Fat: 13g\")\n            ).filter { it.name.contains(searchQuery, ignoreCase = true) }\n        }\n    }\n    \n    Column(\n        modifier = modifier.fillMaxSize()\n    ) {\n        // Top app bar\n        TopAppBar(\n            title = { Text(\"Search Food\") },\n            navigationIcon = {\n                IconButton(onClick = onBackClick) {\n                    Icon(Icons.Default.ArrowBack, contentDescription = \"Back\")\n                }\n            },\n            actions = {\n                IconButton(onClick = { /* Open barcode scanner */ }) {\n                    Icon(Icons.Default.QrCodeScanner, contentDescription = \"Scan barcode\")\n                }\n            }\n        )\n        \n        Column(\n            modifier = Modifier.padding(16.dp)\n        ) {\n            // Search field\n            OutlinedTextField(\n                value = searchQuery,\n                onValueChange = { searchQuery = it },\n                modifier = Modifier.fillMaxWidth(),\n                placeholder = { Text(\"Search foods, recipes, brands...\") },\n                leadingIcon = {\n                    Icon(Icons.Default.Search, contentDescription = \"Search\")\n                },\n                trailingIcon = {\n                    if (searchQuery.isNotEmpty()) {\n                        IconButton(onClick = { searchQuery = \"\" }) {\n                            Icon(Icons.Default.Clear, contentDescription = \"Clear\")\n                        }\n                    }\n                },\n                singleLine = true\n            )\n            \n            Spacer(modifier = Modifier.height(16.dp))\n            \n            // Filter chips\n            LazyRow(\n                horizontalArrangement = Arrangement.spacedBy(8.dp)\n            ) {\n                items(filters) { filter ->\n                    FilterChip(\n                        onClick = { selectedFilter = filter },\n                        label = { Text(filter) },\n                        selected = selectedFilter == filter\n                    )\n                }\n            }\n            \n            Spacer(modifier = Modifier.height(16.dp))\n            \n            // Search results or recent searches\n            if (searchQuery.isBlank()) {\n                // Show recent searches or popular foods\n                Text(\n                    text = \"Recent Searches\",\n                    style = MaterialTheme.typography.titleMedium,\n                    fontWeight = FontWeight.SemiBold\n                )\n                Spacer(modifier = Modifier.height(8.dp))\n                \n                val recentSearches = listOf(\"Chicken Breast\", \"Oatmeal\", \"Greek Yogurt\")\n                recentSearches.forEach { search ->\n                    Card(\n                        modifier = Modifier\n                            .fillMaxWidth()\n                            .padding(vertical = 2.dp),\n                        onClick = { searchQuery = search }\n                    ) {\n                        Row(\n                            modifier = Modifier\n                                .fillMaxWidth()\n                                .padding(16.dp),\n                            verticalAlignment = Alignment.CenterVertically\n                        ) {\n                            Icon(\n                                imageVector = Icons.Default.History,\n                                contentDescription = \"Recent\",\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant\n                            )\n                            Spacer(modifier = Modifier.width(12.dp))\n                            Text(\n                                text = search,\n                                style = MaterialTheme.typography.bodyMedium\n                            )\n                        }\n                    }\n                }\n            } else {\n                // Show search results\n                LazyColumn(\n                    verticalArrangement = Arrangement.spacedBy(8.dp)\n                ) {\n                    items(searchResults) { food ->\n                        FoodSearchResultCard(\n                            food = food,\n                            onClick = { onFoodSelected(food.name) }\n                        )\n                    }\n                    \n                    if (searchResults.isEmpty() && searchQuery.isNotBlank()) {\n                        item {\n                            Column(\n                                modifier = Modifier\n                                    .fillMaxWidth()\n                                    .padding(32.dp),\n                                horizontalAlignment = Alignment.CenterHorizontally\n                            ) {\n                                Icon(\n                                    imageVector = Icons.Default.SearchOff,\n                                    contentDescription = \"No results\",\n                                    modifier = Modifier.size(48.dp),\n                                    tint = MaterialTheme.colorScheme.onSurfaceVariant\n                                )\n                                Spacer(modifier = Modifier.height(16.dp))\n                                Text(\n                                    text = \"No foods found\",\n                                    style = MaterialTheme.typography.titleMedium,\n                                    color = MaterialTheme.colorScheme.onSurfaceVariant\n                                )\n                                Text(\n                                    text = \"Try a different search term or scan a barcode\",\n                                    style = MaterialTheme.typography.bodyMedium,\n                                    color = MaterialTheme.colorScheme.onSurfaceVariant\n                                )\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun FoodSearchResultCard(\n    food: FoodItem,\n    onClick: () -> Unit,\n    modifier: Modifier = Modifier\n) {\n    Card(\n        modifier = modifier.fillMaxWidth(),\n        onClick = onClick\n    ) {\n        Row(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(16.dp),\n            horizontalArrangement = Arrangement.SpaceBetween,\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Column(\n                modifier = Modifier.weight(1f)\n            ) {\n                Text(\n                    text = food.name,\n                    style = MaterialTheme.typography.bodyMedium,\n                    fontWeight = FontWeight.Medium\n                )\n                Text(\n                    text = food.calories,\n                    style = MaterialTheme.typography.bodySmall,\n                    color = MaterialTheme.colorScheme.primary\n                )\n                Text(\n                    text = food.macros,\n                    style = MaterialTheme.typography.bodySmall,\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\n                )\n            }\n            \n            Icon(\n                imageVector = Icons.Default.Add,\n                contentDescription = \"Add food\",\n                tint = MaterialTheme.colorScheme.primary\n            )\n        }\n    }\n}\n\nprivate data class FoodItem(\n    val name: String,\n    val calories: String,\n    val macros: String\n)"